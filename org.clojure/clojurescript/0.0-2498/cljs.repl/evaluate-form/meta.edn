{:ns "cljs.repl", :name "evaluate-form", :file "cljs/repl.clj", :type :fn, :src "(defn evaluate-form\n  \"Evaluate a ClojureScript form in the JavaScript environment. Returns a\n  string which is the ClojureScript return value. This string may or may\n  not be readable by the Clojure reader.\"\n  ([repl-env env filename form]\n     (evaluate-form repl-env env filename form identity))\n  ([repl-env env filename form wrap]\n     (try\n       (binding [ana/*cljs-file* filename]\n         (let [ast (ana/analyze env form)\n               js (comp/emit-str ast)\n               wrap-js\n               (if (:source-map repl-env)\n                 (binding [comp/*source-map-data*\n                           (atom {:source-map (sorted-map)\n                                  :gen-col 0\n                                  :gen-line 0})]\n                   (let [js (comp/emit-str (ana/no-warn (ana/analyze env (wrap form))))\n                         t (System/currentTimeMillis)]\n                     (str js\n                          \"\\n//# sourceURL=repl-\" t \".js\"\n                          \"\\n//# sourceMappingURL=data:application/json;base64,\"\n                          (DatatypeConverter/printBase64Binary\n                           (.getBytes\n                            (sm/encode\n                             {(str \"repl-\" t \".cljs\")\n                              (:source-map @comp/*source-map-data*)}\n                             {:lines (+ (:gen-line @comp/*source-map-data*) 3)\n                              :file  (str \"repl-\" t \".js\")\n                              :sources-content\n                              [(or (:source (meta form))\n                                   ;; handle strings / primitives without metadata\n                                   (with-out-str (pr form)))]})\n                            \"UTF-8\")))))\n                 (comp/emit-str (ana/no-warn (ana/analyze env (wrap form)))))]\n           (when (= (:op ast) :ns)\n             (load-dependencies repl-env (into (vals (:requires ast))\n                                               (distinct (vals (:uses ast))))))\n           (when *cljs-verbose*\n             (print js))\n           (let [ret (-evaluate repl-env filename (:line (meta form)) wrap-js)]\n             (case (:status ret)\n               ;;we eat ns errors because we know goog.provide() will throw when reloaded\n               ;;TODO - file bug with google, this is bs error\n               ;;this is what you get when you try to 'teach new developers'\n               ;;via errors (goog/base.js 104)\n               :error (display-error ret form)\n               :exception (display-error ret form\n                                         #(prn \"Error evaluating:\" form :as js))\n               :success (:value ret)))))\n       (catch Throwable ex\n         (.printStackTrace ex)\n         (println (str ex))))))", :column 1, :line 73, :arglists ([repl-env env filename form] [repl-env env filename form wrap]), :doc "Evaluate a ClojureScript form in the JavaScript environment. Returns a\n  string which is the ClojureScript return value. This string may or may\n  not be readable by the Clojure reader."}