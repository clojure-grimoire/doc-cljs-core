{:ns "cljs.core", :name "warn-and-update-protocol", :file "cljs/core.clj", :type :fn, :src "(defn warn-and-update-protocol [p type env]\n  (when-not (= 'Object p)\n    (if-let [var (cljs.analyzer/resolve-existing-var (dissoc env :locals) p)]\n      (do\n        (when-not (:protocol-symbol var)\n          (cljs.analyzer/warning :invalid-protocol-symbol env {:protocol p}))\n        (when (core/and (:protocol-deprecated cljs.analyzer/*cljs-warnings*)\n                (-> var :deprecated)\n                (not (-> p meta :deprecation-nowarn)))\n          (cljs.analyzer/warning :protocol-deprecated env {:protocol p}))\n        (when (:protocol-symbol var)\n          (swap! env/*compiler* update-in [:cljs.analyzer/namespaces]\n            (fn [ns]\n              (update-in ns [(:ns var) :defs (symbol (name p)) :impls]\n                conj type)))))\n      (when (:undeclared cljs.analyzer/*cljs-warnings*)\n        (cljs.analyzer/warning :undeclared-protocol-symbol env {:protocol p})))))", :column 1, :line 652, :arglists ([p type env])}