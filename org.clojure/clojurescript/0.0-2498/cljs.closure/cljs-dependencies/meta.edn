{:ns "cljs.closure", :name "cljs-dependencies", :file "cljs/closure.clj", :type :fn, :src "(defn cljs-dependencies\n  \"Given a list of all required namespaces, return a list of\n  IJavaScripts which are the cljs dependencies. The returned list will\n  not only include the explicitly required files but any transitive\n  depedencies as well. JavaScript files will be compiled to the\n  working directory if they do not already exist.\n\n  Only load dependencies from the classpath.\"\n  [opts requires]\n  (let [cljs-deps (fn [lib-names]\n                    (->> (remove #(or ((@env/*compiler* :js-dependency-index) %)\n                                    (deps/find-classpath-lib %))\n                           lib-names)\n                      (map cljs-source-for-namespace)\n                      (remove (comp nil? :uri))))]\n    (loop [required-files (cljs-deps requires)\n           visited (set required-files)\n           js-deps #{}]\n      (if (seq required-files)\n        (let [next-file (first required-files)\n              js (get-compiled-cljs opts next-file)\n              new-req (remove #(contains? visited %) (cljs-deps (deps/-requires js)))]\n          (recur (into (rest required-files) new-req)\n                 (into visited new-req)\n                 (conj js-deps js)))\n        (remove nil? js-deps)))))", :column 1, :line 474, :arglists ([opts requires]), :doc "Given a list of all required namespaces, return a list of\n  IJavaScripts which are the cljs dependencies. The returned list will\n  not only include the explicitly required files but any transitive\n  depedencies as well. JavaScript files will be compiled to the\n  working directory if they do not already exist.\n\n  Only load dependencies from the classpath."}