{:ns "cljs.closure", :name "load-externs", :file "cljs/closure.clj", :type :fn, :src "(defn load-externs\n  \"Externs are JavaScript files which contain empty definitions of\n  functions which will be provided by the envorinment. Any function in\n  an extern file will not be renamed during optimization.\n\n  Options may contain an :externs key with a list of file paths to\n  load. The :use-only-custom-externs flag may be used to indicate that\n  the default externs should be excluded.\"\n  [{:keys [externs use-only-custom-externs target ups-externs]}]\n  (let [filter-cp-js (fn [paths]\n                       (for [p paths u (deps/find-js-classpath p)] u))\n        filter-js (fn [paths]\n                    (for [p paths u (deps/find-js-resources p)] u))\n        add-target (fn [ext]\n                     (cons (io/resource \"cljs/externs.js\")\n                       (if (= :nodejs target)\n                         (cons (io/resource \"cljs/nodejs_externs.js\")\n                           (or ext []))\n                         ext)))\n        load-js (fn [ext]\n                  (map #(js-source-file (.getFile %) (slurp %)) ext))]\n    (let [js-sources (-> externs filter-js add-target load-js)\n          ups-sources (-> ups-externs filter-cp-js load-js)\n          all-sources (concat js-sources ups-sources)] \n      (if use-only-custom-externs\n        all-sources\n        (into all-sources (CommandLineRunner/getDefaultExterns))))))", :column 1, :line 190, :arglists ([{:keys [externs use-only-custom-externs target ups-externs]}]), :doc "Externs are JavaScript files which contain empty definitions of\n  functions which will be provided by the envorinment. Any function in\n  an extern file will not be renamed during optimization.\n\n  Options may contain an :externs key with a list of file paths to\n  load. The :use-only-custom-externs flag may be used to indicate that\n  the default externs should be excluded."}