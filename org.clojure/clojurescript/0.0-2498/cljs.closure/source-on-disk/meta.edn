{:ns "cljs.closure", :name "source-on-disk", :file "cljs/closure.clj", :type :fn, :src "(defn source-on-disk\n  \"Ensure that the given JavaScript exists on disk. Write in memory\n  sources and files contained in jars to the working directory. Return\n  updated IJavaScript with the new location.\"\n  [opts js]\n  (let [url ^URL (deps/-url js)]\n    (if (or (not url)\n            (= (.getProtocol url) \"jar\"))\n      (write-javascript opts js)\n      ;; always copy original sources to the output directory\n      ;; when source maps enabled\n      (let [out-file (if-let [ns (and (:source-map opts)\n                                      (first (:provides js)))]\n                       (io/file (io/file (output-directory opts))\n                         (util/ns->relpath ns)))\n            source-url (:source-url js)]\n        (when (and out-file source-url\n                   (or (not (.exists ^File out-file))\n                       (> (.lastModified (io/file source-url))\n                          (.lastModified out-file))))\n          (spit out-file (slurp source-url)))\n        js))))", :column 1, :line 776, :arglists ([opts js]), :doc "Ensure that the given JavaScript exists on disk. Write in memory\n  sources and files contained in jars to the working directory. Return\n  updated IJavaScript with the new location."}