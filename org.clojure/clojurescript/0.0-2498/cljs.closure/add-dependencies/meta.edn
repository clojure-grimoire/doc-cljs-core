{:ns "cljs.closure", :name "add-dependencies", :file "cljs/closure.clj", :type :fn, :src "(defn add-dependencies\n  \"Given one or more IJavaScript objects in dependency order, produce\n  a new sequence of IJavaScript objects which includes the input list\n  plus all dependencies in dependency order.\"\n  [opts & inputs]\n  (let [requires (mapcat deps/-requires inputs)\n        required-cljs (remove (set inputs) (cljs-dependencies opts requires))\n        required-js (js-dependencies opts (set (concat (mapcat deps/-requires required-cljs) requires)))\n        provided (mapcat deps/-provides (concat inputs required-cljs required-js))\n        unprovided (clojure.set/difference (set requires) (set provided) #{\"constants-table\"})]\n    (when (seq unprovided)\n      (ana/warning :unprovided @env/*compiler* {:unprovided (sort unprovided)}))\n    (cons (javascript-file nil (deps/goog-resource \"goog/base.js\") [\"goog\"] nil)\n          (deps/dependency-order\n           (concat (map #(-> (javascript-file (:foreign %)\n                                              (or (:url %) (io/resource (:file %)))\n                                              (:provides %)\n                                              (:requires %))\n                             (assoc :group (:group %))) required-js)\n                   [(when (-> @env/*compiler* :opts :emit-constants)\n                      (let [url (deps/to-url (str (output-directory opts) \"/constants_table.js\"))]\n                        (javascript-file nil url url [\"constants-table\"] [\"cljs.core\"] nil nil)))]\n                   required-cljs\n                   inputs)))))", :column 1, :line 510, :arglists ([opts & inputs]), :doc "Given one or more IJavaScript objects in dependency order, produce\n  a new sequence of IJavaScript objects which includes the input list\n  plus all dependencies in dependency order."}