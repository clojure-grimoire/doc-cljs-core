{:ns "cljs.compiler", :name "emit-apply-to", :file "cljs/compiler.clj", :type :fn, :src "(defn emit-apply-to\n  [{:keys [name params env]}]\n  (let [arglist (gensym \"arglist__\")\n        delegate-name (str (munge name) \"__delegate\")]\n    (emitln \"(function (\" arglist \"){\")\n    (doseq [[i param] (map-indexed vector (drop-last 2 params))]\n      (emits \"var \")\n      (emit param)\n      (emits \" = cljs.core.first(\")\n      (emitln arglist \");\")\n      (emitln arglist \" = cljs.core.next(\" arglist \");\"))\n    (if (< 1 (count params))\n      (do\n        (emits \"var \")\n        (emit (last (butlast params)))\n        (emitln \" = cljs.core.first(\" arglist \");\")\n        (emits \"var \")\n        (emit (last params))\n        (emitln \" = cljs.core.rest(\" arglist \");\")\n        (emits \"return \" delegate-name \"(\")\n        (doseq [param params]\n          (emit param)\n          (when-not (= param (last params)) (emits \",\")))\n        (emitln \");\"))\n      (do\n        (emits \"var \")\n        (emit (last params))\n        (emitln \" = cljs.core.seq(\" arglist \");\")\n        (emits \"return \" delegate-name \"(\")\n        (doseq [param params]\n          (emit param)\n          (when-not (= param (last params)) (emits \",\")))\n        (emitln \");\")))\n    (emits \"})\")))", :column 1, :line 445, :arglists ([{:keys [name params env]}])}