{:ns "cljs.compiler", :name "compile-root", :file "cljs/compiler.clj", :type :fn, :src "(defn compile-root\n  \"Looks recursively in src-dir for .cljs files and compiles them to\n   .js files. If target-dir is provided, output will go into this\n   directory mirroring the source directory structure. Returns a list\n   of maps containing information about each file which was compiled\n   in dependency order.\"\n  ([src-dir]\n     (compile-root src-dir \"out\"))\n  ([src-dir target-dir]\n     (compile-root src-dir target-dir nil))\n  ([src-dir target-dir opts]\n     (swap! env/*compiler* assoc :root src-dir)\n     (let [src-dir-file (io/file src-dir)]\n       (loop [cljs-files (cljs-files-in src-dir-file)\n              output-files []]\n         (if (seq cljs-files)\n           (let [cljs-file (first cljs-files)\n                 output-file (util/to-target-file target-dir (ana/parse-ns cljs-file))\n                 ns-info (compile-file cljs-file output-file opts)]\n             (recur (rest cljs-files) (conj output-files (assoc ns-info :file-name (.getPath output-file)))))\n           output-files)))))", :column 1, :line 988, :arglists ([src-dir] [src-dir target-dir] [src-dir target-dir opts]), :doc "Looks recursively in src-dir for .cljs files and compiles them to\n   .js files. If target-dir is provided, output will go into this\n   directory mirroring the source directory structure. Returns a list\n   of maps containing information about each file which was compiled\n   in dependency order."}