{:ns "cljs.js-deps", :name "find-classpath-lib", :file "cljs/js_deps.clj", :type :fn, :src "(defn find-classpath-lib\n  \"Given [lib], a string or symbol naming a goog-style JavaScript library\n  (i.e. one that uses goog.provide and goog.require), look for a resource on the\n  classpath corresponding to [lib] and return a map via `library-graph-node`\n  that contains its relevant metadata.  The library found on the classpath\n  _must_ contain a `goog.provide` that matches [lib], or this fn will return nil\n  and print a warning.\"\n  [lib]\n  (when-let [lib-resource (some-> (name lib)\n                            (.replace \\. \\/)\n                            (.replace \\- \\_)\n                            (str \".js\")\n                            io/resource)]\n    (let [{:keys [provides] :as lib-info} (library-graph-node lib-resource)]\n      (if (some #{(name lib)} provides)\n        lib-info\n        (println (format \"WARNING: JavaScript file found on classpath for library `%s`, but does not contain a corresponding `goog.provide` declaration: %s\"\n                   lib lib-resource))))))", :column 1, :line 267, :arglists ([lib]), :doc "Given [lib], a string or symbol naming a goog-style JavaScript library\n  (i.e. one that uses goog.provide and goog.require), look for a resource on the\n  classpath corresponding to [lib] and return a map via `library-graph-node`\n  that contains its relevant metadata.  The library found on the classpath\n  _must_ contain a `goog.provide` that matches [lib], or this fn will return nil\n  and print a warning."}