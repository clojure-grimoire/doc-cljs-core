{:ns "cljs.repl.browser", :name "send-static", :file "cljs/repl/browser.clj", :type :fn, :src "(defn send-static [{path :path :as request} conn opts]\n  (if (and (:static-dir opts)\n           (not= \"/favicon.ico\" path))\n    (let [path   (if (= \"/\" path) \"/index.html\" path)\n          st-dir (:static-dir opts)\n          local-path (cond->\n                       (seq (for [x (if (string? st-dir) [st-dir] st-dir)\n                                  :when (.exists (io/file (str x path)))]\n                              (str x path)))\n                       (complement nil?) first)\n          local-path (if (nil? local-path)\n                       (cond\n                         (re-find #\".jar\" path)\n                         (io/resource (second (string/split path #\".jar!/\")))\n                         (re-find (Pattern/compile (System/getProperty \"user.dir\")) path)\n                         (io/file (string/replace path (str (System/getProperty \"user.dir\") \"/\") \"\"))\n                         :else nil)\n                       local-path)]\n      (if local-path\n        (server/send-and-close conn 200 (slurp local-path)\n          (condp #(.endsWith %2 %1) path\n            \".html\" \"text/html\"\n            \".css\" \"text/css\"\n            \".html\" \"text/html\"\n            \".jpg\" \"image/jpeg\"\n            \".js\" \"text/javascript\"\n            \".cljs\" \"text/x-clojure\"\n            \".map\" \"application/json\"\n            \".png\" \"image/png\"\n            \"text/plain\"))\n        (server/send-404 conn path)))\n    (server/send-404 conn path)))", :column 1, :line 65, :arglists ([{path :path, :as request} conn opts])}