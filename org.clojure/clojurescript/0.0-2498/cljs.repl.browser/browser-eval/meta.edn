{:ns "cljs.repl.browser", :name "browser-eval", :file "cljs/repl/browser.clj", :type :fn, :src "(defn browser-eval\n  \"Given a string of JavaScript, evaluate it in the browser and return a map representing the\n   result of the evaluation. The map will contain the keys :type and :value. :type can be\n   :success, :exception, or :error. :success means that the JavaScript was evaluated without\n   exception and :value will contain the return value of the evaluation. :exception means that\n   there was an exception in the browser while evaluating the JavaScript and :value will\n   contain the error message. :error means that some other error has occured.\"\n  [form]\n  (let [return-value (promise)]\n    (send-for-eval form\n                   (fn [val] (deliver return-value val)))\n    (let [ret @return-value]\n      (try (read-string ret)\n           (catch Exception e\n             {:status :error\n              :value (str \"Could not read return value: \" ret)})))))", :column 1, :line 152, :arglists ([form]), :doc "Given a string of JavaScript, evaluate it in the browser and return a map representing the\n   result of the evaluation. The map will contain the keys :type and :value. :type can be\n   :success, :exception, or :error. :success means that the JavaScript was evaluated without\n   exception and :value will contain the return value of the evaluation. :exception means that\n   there was an exception in the browser while evaluating the JavaScript and :value will\n   contain the error message. :error means that some other error has occured."}