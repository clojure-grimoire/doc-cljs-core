{:ns "cljs.build.api", :name "cljs-dependents-for-macro-namespaces", :file "cljs/build/api.clj", :type :fn, :src "(defn cljs-dependents-for-macro-namespaces\n  \"Takes a list of Clojure (.clj) namespaces that define macros and\n  returns a list ClojureScript (.cljs) namespaces that depend on those macro\n  namespaces.\n\n  For example where example.macros is defined in the clojure file\n  \\\"example/macros.clj\\\" and both 'example.core and 'example.util are\n  ClojureScript namespaces that require and use the macros from\n  'example.macros :\n  (cljs-dependents-for-macro-namespaces 'example.macros) ->\n  ('example.core 'example.util)\n\n  This must be called when cljs.env/*compiler* is bound to the\n  compile env that you are inspecting. See cljs.env/with-compile-env.\"\n  [namespaces]\n  (map :name\n       (let [namespaces-set (set namespaces)]\n         (filter (fn [x] (not-empty\n                         (intersection namespaces-set (-> x :require-macros vals set))))\n                 (vals (:cljs.analyzer/namespaces @env/*compiler*))))))", :column 1, :line 38, :arglists ([namespaces]), :doc "Takes a list of Clojure (.clj) namespaces that define macros and\n  returns a list ClojureScript (.cljs) namespaces that depend on those macro\n  namespaces.\n\n  For example where example.macros is defined in the clojure file\n  \"example/macros.clj\" and both 'example.core and 'example.util are\n  ClojureScript namespaces that require and use the macros from\n  'example.macros :\n  (cljs-dependents-for-macro-namespaces 'example.macros) ->\n  ('example.core 'example.util)\n\n  This must be called when cljs.env/*compiler* is bound to the\n  compile env that you are inspecting. See cljs.env/with-compile-env."}