{:ns "cljs.js-deps", :name "parse-js-ns", :file "cljs/js_deps.clj", :type :fn, :src "(defn parse-js-ns\n  \"Given the lines from a JavaScript source file, parse the provide\n  and require statements and return them in a map. Assumes that all\n  provide and require statements appear before the first function\n  definition.\"\n  [lines]\n  (letfn [(conj-in [m k v] (update-in m [k] (fn [old] (conj old v))))]\n    (->> (for [line lines x (string/split line #\";\")] x)\n         (map string/trim)\n         (take-while #(not (re-matches #\".*=[\\s]*function\\(.*\\)[\\s]*[{].*\" %)))\n         (map #(re-matches #\".*goog\\.(provide|require)\\(['\\\"](.*)['\\\"]\\)\" %))\n         (remove nil?)\n         (map #(drop 1 %))\n         (reduce (fn [m ns]\n                   (let [munged-ns (string/replace (last ns) \"_\" \"-\")]\n                     (if (= (first ns) \"require\")\n                       (conj-in m :requires munged-ns)\n                       (conj-in m :provides munged-ns))))\n                 {:requires [] :provides []}))))", :column 1, :line 79, :arglists ([lines]), :doc "Given the lines from a JavaScript source file, parse the provide\n  and require statements and return them in a map. Assumes that all\n  provide and require statements appear before the first function\n  definition."}