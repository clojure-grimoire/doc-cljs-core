{:ns "cljs.analyzer", :name "infer-tag", :file "cljs/analyzer.clj", :type :fn, :src "(defn infer-tag [env e]\n  (if-let [tag (get-tag e)]\n    tag\n    (case (:op e)\n      :recur 'ignore\n      :throw 'ignore\n      :let (infer-tag env (:expr e))\n      :loop (infer-tag env (:expr e))\n      :do  (infer-tag env (:ret e))\n      :method (infer-tag env (:expr e))\n      :def (infer-tag env (:init e))\n      :invoke (let [{info :info :as f} (:f e)]\n                (or (and (:fn-var info) (:ret-tag info))\n                    (infer-tag env\n                      (assoc (find-matching-method f (:args e)) :op :method))\n                    'any))\n      :if (let [{{:keys [op form]} :test} e\n                then-tag (infer-tag env (:then e))]\n            (if (and (= op :constant)\n                     (not (#{nil false} form)))\n              then-tag\n              (let [else-tag (infer-tag env (:else e))]\n                (cond\n                  (or (= then-tag else-tag)\n                    (= else-tag 'ignore)) then-tag\n                  (= then-tag 'ignore) else-tag\n                  ;; TODO: temporary until we move not-native -> clj - David\n                  (and (or ('#{clj not-native} then-tag) (type? env then-tag))\n                    (or ('#{clj not-native} else-tag) (type? env else-tag)))\n                  'clj\n                  :else\n                  (if (every? '#{boolean seq} [then-tag else-tag])\n                    'seq\n                    (let [then-tag (if (set? then-tag) then-tag #{then-tag})\n                           else-tag (if (set? else-tag) else-tag #{else-tag})]\n                      (into then-tag else-tag)))))))\n      :constant (case (:form e)\n                  true 'boolean\n                  false 'boolean\n                  'any)\n      :var (if (:init e)\n             (infer-tag env (:init e))\n             (infer-tag env (:info e)))\n      nil)))", :column 1, :line 458, :arglists ([env e])}