{:ns "cljs.analyzer", :name "resolve-var", :file "cljs/analyzer.clj", :type :fn, :src "(defn resolve-var\n  \"Resolve a var. Accepts a side-effecting confirm fn for producing\n   warnings about unresolved vars.\"\n  ([env sym] (resolve-var env sym nil))\n  ([env sym confirm]\n     (if (= (namespace sym) \"js\")\n       {:name sym :ns 'js}\n       (let [s (str sym)\n             lb (-> env :locals sym)]\n         (cond\n           lb lb\n\n           (namespace sym)\n           (let [ns (namespace sym)\n                 ns (if (= \"clojure.core\" ns) \"cljs.core\" ns)\n                 full-ns (resolve-ns-alias env ns)]\n             (when confirm\n               (when (not= (-> env :ns :name) full-ns)\n                 (confirm-ns env full-ns))\n               (confirm env full-ns (symbol (name sym))))\n             (merge (get-in @env/*compiler* [::namespaces full-ns :defs (symbol (name sym))])\n                    {:name (symbol (str full-ns) (str (name sym)))\n                     :ns full-ns}))\n\n           (.contains s \".\")\n           (let [idx (.indexOf s \".\")\n                 prefix (symbol (subs s 0 idx))\n                 suffix (subs s (inc idx))\n                 lb (-> env :locals prefix)]\n             (if lb\n               {:name (symbol (str (:name lb)) suffix)}\n               (let [cur-ns (-> env :ns :name)]\n                 (if-let [full-ns (get-in @env/*compiler* [::namespaces cur-ns :imports prefix])]\n                   {:name (symbol (str full-ns) suffix)}\n                   (if-let [info (get-in @env/*compiler* [::namespaces cur-ns :defs prefix])]\n                     (merge info\n                       {:name (symbol (str cur-ns) (str sym))\n                        :ns cur-ns})\n                     (merge (get-in @env/*compiler* [::namespaces prefix :defs (symbol suffix)])\n                       {:name (if (= \"\" prefix) (symbol suffix) (symbol (str prefix) suffix))\n                        :ns prefix}))))))\n\n           (get-in @env/*compiler* [::namespaces (-> env :ns :name) :uses sym])\n           (let [full-ns (get-in @env/*compiler* [::namespaces (-> env :ns :name) :uses sym])]\n             (merge\n              (get-in @env/*compiler* [::namespaces full-ns :defs sym])\n              {:name (symbol (str full-ns) (str sym))\n               :ns (-> env :ns :name)}))\n\n           (get-in @env/*compiler* [::namespaces (-> env :ns :name) :imports sym])\n           (recur env (get-in @env/*compiler* [::namespaces (-> env :ns :name) :imports sym]) confirm)\n\n           :else\n           (let [cur-ns (-> env :ns :name)\n                 full-ns (cond\n                           (get-in @env/*compiler* [::namespaces cur-ns :defs sym]) cur-ns\n                           (core-name? env sym) 'cljs.core\n                           :else cur-ns)]\n             (when confirm\n               (confirm env full-ns sym))\n             (merge (get-in @env/*compiler* [::namespaces full-ns :defs sym])\n               {:name (symbol (str full-ns) (str sym))\n                :ns full-ns})))))))", :column 1, :line 337, :arglists ([env sym] [env sym confirm]), :doc "Resolve a var. Accepts a side-effecting confirm fn for producing\n   warnings about unresolved vars."}