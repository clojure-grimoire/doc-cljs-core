{:ns "cljs.analyzer", :name "forms-seq", :file "cljs/analyzer.clj", :type :fn, :src "(defn forms-seq\n  \"Seq of Clojure/ClojureScript forms from [f], which can be anything for which\n`clojure.java.io/reader` can produce a `java.io.Reader`. Optionally accepts a [filename]\nargument, which the reader will use in any emitted errors.\"\n  ([f] (forms-seq f (source-path f)))\n  ([f filename]\n     (let [rdr (io/reader f)\n           pbr (readers/indexing-push-back-reader\n                (java.io.PushbackReader. rdr) 1 filename)\n           data-readers tags/*cljs-data-readers*\n           forms-seq*\n           (fn forms-seq* []\n             (lazy-seq\n              (let [eof-sentinel (Object.)\n                    form (binding [*ns* (create-ns *cljs-ns*)\n                                   reader/*data-readers* data-readers\n                                   reader/*alias-map*\n                                   (apply merge\n                                          ((juxt :requires :require-macros)\n                                           (get-namespace *cljs-ns*)))]\n                           (reader/read pbr nil eof-sentinel))]\n                (if (identical? form eof-sentinel)\n                  (.close rdr)\n                  (cons form (forms-seq*))))))]\n       (forms-seq*))))", :column 1, :line 1630, :arglists ([f] [f filename]), :doc "Seq of Clojure/ClojureScript forms from [f], which can be anything for which\n`clojure.java.io/reader` can produce a `java.io.Reader`. Optionally accepts a [filename]\nargument, which the reader will use in any emitted errors."}