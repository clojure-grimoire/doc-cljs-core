{:ns "cljs.analyzer", :name "analyze-file", :file "cljs/analyzer.clj", :type :fn, :src "(defn analyze-file\n  ([f] (analyze-file f nil))\n  ([f {:keys [output-dir] :as opts}]\n     (let [res (cond\n                 (instance? File f) f\n                 (instance? java.net.URL f) f\n                 (re-find #\"^file://\" f) (java.net.URL. f)\n                 :else (io/resource f))]\n       (assert res (str \"Can't find \" f \" in classpath\"))\n       (env/ensure\n         (let [path (if (instance? File res)\n                      (.getPath ^File res)\n                      (.getPath ^java.net.URL res))\n               ;; cache (if output-dir\n               ;;         (cache-file res output-dir))\n               ]\n           (when-not (get-in @env/*compiler* [::analyzed-cljs path])\n             (binding [*cljs-ns* 'cljs.user\n                       *cljs-file* path\n                       reader/*alias-map* (or reader/*alias-map* {})]\n               (let [env (assoc (empty-env) :build-options opts)\n                     ns  (loop [ns nil forms (seq (forms-seq res))]\n                           (if forms\n                             (let [form (first forms)\n                                   env  (assoc env :ns (get-namespace *cljs-ns*))\n                                   ast  (analyze env form opts)]\n                               (if (= (:op ast) :ns)\n                                 (recur (:name ast) (next forms))\n                                 (recur ns (next forms))))\n                             ns))]\n                 (swap! env/*compiler* assoc-in [::analyzed-cljs path] true)))))))))", :column 1, :line 1701, :arglists ([f] [f {:keys [output-dir], :as opts}])}