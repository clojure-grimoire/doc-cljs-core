{:ns "cljs.analyzer", :name "parse-require-spec", :file "cljs/analyzer.clj", :type :fn, :src "(defn parse-require-spec [env macros? deps aliases spec]\n  (if (symbol? spec)\n    (recur env macros? deps aliases [spec])\n    (do\n      (basic-validate-ns-spec env macros? spec)\n      (let [[lib & opts] spec\n            {alias :as referred :refer :or {alias lib}} (apply hash-map opts)\n            [rk uk] (if macros? [:require-macros :use-macros] [:require :use])]\n        (when-not (or (symbol? alias) (nil? alias))\n          (throw\n            (error env\n              (parse-ns-error-msg spec\n                \":as must be followed by a symbol in :require / :require-macros\"))))\n        (when alias\n          (let [alias-type (if macros? :macros :fns)]\n            (when (contains? (alias-type @aliases) alias)\n              (throw (error env (parse-ns-error-msg spec \":as alias must be unique\"))))\n            (swap! aliases\n              update-in [alias-type]\n              conj alias)))\n        (when-not (or (and (sequential? referred)\n                           (every? symbol? referred))\n                      (nil? referred))\n          (throw\n            (error env\n              (parse-ns-error-msg spec\n                \":refer must be followed by a sequence of symbols in :require / :require-macros\"))))\n        (when-not macros?\n          (swap! deps conj lib))\n        (merge\n          (when alias\n            {rk (merge {alias lib} {lib lib})})\n          (when referred {uk (apply hash-map (interleave referred (repeat lib)))}))))))", :column 1, :line 1104, :arglists ([env macros? deps aliases spec])}