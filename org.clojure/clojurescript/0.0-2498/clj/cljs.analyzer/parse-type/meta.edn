{:ns "cljs.analyzer", :name "parse-type", :file "cljs/analyzer.clj", :type :fn, :src "(defn parse-type\n  [op env [_ tsym fields pmasks body :as form]]\n  (let [t (:name (resolve-var (dissoc env :locals) tsym))\n        locals (reduce (fn [m fld]\n                         (assoc m fld\n                                {:name fld\n                                 :line (get-line fld env)\n                                 :column (get-col fld env)\n                                 :field true\n                                 :mutable (-> fld meta :mutable)\n                                 :unsynchronized-mutable (-> fld meta :unsynchronized-mutable)\n                                 :volatile-mutable (-> fld meta :volatile-mutable)\n                                 :tag (-> fld meta :tag)\n                                 :shadow (m fld)}))\n                       {} (if (= :defrecord* op)\n                            (concat fields '[__meta __extmap ^:mutable __hash])\n                            fields))]\n    (swap! env/*compiler* update-in [::namespaces (-> env :ns :name) :defs tsym]\n           (fn [m]\n             (let [m (assoc (or m {})\n                       :name t\n                       :type true\n                       :num-fields (count fields)\n                       :record (= :defrecord* op))]\n               (merge m\n                      (dissoc (meta tsym) :protocols)\n                      {:protocols (-> tsym meta :protocols)}\n                      (source-info tsym env)))))\n    {:op op :env env :form form :t t :fields fields :pmasks pmasks :body (analyze (assoc env :locals locals) body)}))", :column 1, :line 1229, :arglists ([op env [_ tsym fields pmasks body :as form]])}