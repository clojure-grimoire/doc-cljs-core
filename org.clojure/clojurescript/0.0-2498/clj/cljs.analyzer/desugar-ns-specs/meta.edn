{:ns "cljs.analyzer", :name "desugar-ns-specs", :file "cljs/analyzer.clj", :type :fn, :src "(defn desugar-ns-specs [args]\n  (let [{:keys [require] :as indexed}\n        (->> args\n          (map (fn [[k & specs]] [k (into [] specs)]))\n          (into {}))\n        sugar-keys #{:include-macros :refer-macros}\n        remove-from-spec\n        (fn [pred spec]\n          (if-not (and (sequential? spec) (some pred spec))\n            spec\n            (let [[l r] (split-with (complement pred) spec)]\n              (recur pred (concat l (drop 2 r))))))\n        to-macro-specs\n        (fn [specs]\n          (->> specs\n            (filter #(and (sequential? %) (some sugar-keys %)))\n            (map #(->> % (remove-from-spec #{:include-macros})\n                         (remove-from-spec #{:refer})\n                         (map (fn [x] (if (= x :refer-macros) :refer x)))))))\n        remove-sugar (partial remove-from-spec sugar-keys)]\n    (if-let [require-specs (seq (to-macro-specs require))]\n      (map (fn [[k v]] (cons k (map remove-sugar v)))\n        (update-in indexed [:require-macros] (fnil into []) require-specs))\n      args)))", :column 1, :line 1153, :arglists ([args])}