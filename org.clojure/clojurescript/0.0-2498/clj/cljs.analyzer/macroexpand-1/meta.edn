{:ns "cljs.analyzer", :name "macroexpand-1", :file "cljs/analyzer.clj", :type :fn, :src "(defn macroexpand-1 [env form]\n  (env/ensure\n    (wrapping-errors env\n      (let [op (first form)]\n        (if (specials op)\n          form\n          (if-let [mac (and (symbol? op) (get-expander op env))]\n            (binding [*ns* (create-ns *cljs-ns*)]\n              (let [form' (apply mac form env (rest form))]\n                (if (seq? form')\n                  (let [sym' (first form')\n                        sym  (first form)]\n                    (if (= sym' 'js*)\n                      (vary-meta form' merge\n                                 (cond-> {:js-op (if (namespace sym) sym (symbol \"cljs.core\" (str sym)))}\n                                         (-> mac meta ::numeric) (assoc :numeric true)))\n                      form'))\n                  form')))\n            (if (symbol? op)\n              (let [opname (str op)]\n                (cond\n                 (= (first opname) \\.) (let [[target & args] (next form)]\n                                         (with-meta (list* '. target (symbol (subs opname 1)) args)\n                                           (meta form)))\n                 (= (last opname) \\.) (with-meta\n                                        (list* 'new (symbol (subs opname 0 (dec (count opname)))) (next form))\n                                        (meta form))\n                 :else form))\n              form)))))))", :column 1, :line 1469, :arglists ([env form])}