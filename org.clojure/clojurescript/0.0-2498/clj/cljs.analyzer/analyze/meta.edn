{:ns "cljs.analyzer", :name "analyze", :file "cljs/analyzer.clj", :type :fn, :src "(defn analyze\n  \"Given an environment, a map containing {:locals (mapping of names to bindings), :context\n  (one of :statement, :expr, :return), :ns (a symbol naming the\n  compilation ns)}, and form, returns an expression object (a map\n  containing at least :form, :op and :env keys). If expr has any (immediately)\n  nested exprs, must have :children [exprs...] entry. This will\n  facilitate code walking without knowing the details of the op set.\"\n  ([env form] (analyze env form nil))\n  ([env form name] (analyze env form name nil))\n  ([env form name opts]\n    (env/ensure\n      (wrapping-errors env\n        (reduce (fn [ast pass] (pass env ast))\n          (binding [reader/*alias-map* (or reader/*alias-map* {})]\n            (let [form (if (instance? clojure.lang.LazySeq form)\n                         (or (seq form) ())\n                         form)]\n              (load-core)\n              (cond\n                (symbol? form) (analyze-symbol env form)\n                (and (seq? form) (seq form)) (analyze-seq env form name opts)\n                (map? form) (analyze-map env form)\n                (vector? form) (analyze-vector env form)\n                (set? form) (analyze-set env form)\n                (keyword? form) (analyze-keyword env form)\n                (instance? JSValue form) (analyze-js-value env form)\n                (= form ()) (analyze-list env form)\n                :else\n                (let [tag (cond\n                            (nil? form)    'clj-nil\n                            (number? form) 'number\n                            (string? form) 'string\n                            (true? form)   'boolean\n                            (false? form)  'boolean)]\n                  (cond-> {:op :constant :env env :form form}\n                    tag (assoc :tag tag))))))\n          (or *passes* [infer-type]))))))", :column 1, :line 1585, :arglists ([env form] [env form name] [env form name opts]), :doc "Given an environment, a map containing {:locals (mapping of names to bindings), :context\n  (one of :statement, :expr, :return), :ns (a symbol naming the\n  compilation ns)}, and form, returns an expression object (a map\n  containing at least :form, :op and :env keys). If expr has any (immediately)\n  nested exprs, must have :children [exprs...] entry. This will\n  facilitate code walking without knowing the details of the op set."}