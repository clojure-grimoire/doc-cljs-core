{:ns "cljs.compiler", :name "compile-file", :file "cljs/compiler.clj", :type :fn, :src "(defn compile-file\n  \"Compiles src to a file of the same name, but with a .js extension,\n   in the src file's directory.\n\n   With dest argument, write file to provided location. If the dest\n   argument is a file outside the source tree, missing parent\n   directories will be created. The src file will only be compiled if\n   the dest file has an older modification time.\n\n   Both src and dest may be either a String or a File.\n\n   Returns a map containing {:ns .. :provides .. :requires .. :file ..}.\n   If the file was not compiled returns only {:file ...}\"\n  ([src]\n    (let [dest (rename-to-js src)]\n      (compile-file src dest nil)))\n  ([src dest]\n    (compile-file src dest nil))\n  ([src dest opts]\n    (let [src-file (io/file src)\n          dest-file (io/file dest)]\n      (if (.exists src-file)\n        (try\n          (let [{ns :ns :as ns-info} (ana/parse-ns src-file dest-file opts)]\n            (if (requires-compilation? src-file dest-file opts)\n              (do (mkdirs dest-file)\n                (when (contains? (::ana/namespaces @env/*compiler*) ns)\n                  (swap! env/*compiler* update-in [::ana/namespaces] dissoc ns))\n                (compile-file* src-file dest-file opts))\n              (do\n                (when-not (contains? (::ana/namespaces @env/*compiler*) ns)\n                  (with-core-cljs opts (fn [] (ana/analyze-file src-file opts))))\n                ns-info)))\n          (catch Exception e\n            (throw (ex-info (str \"failed compiling file:\" src) {:file src} e))))\n        (throw (java.io.FileNotFoundException. (str \"The file \" src \" does not exist.\")))))))", :column 1, :line 942, :arglists ([src] [src dest] [src dest opts]), :doc "Compiles src to a file of the same name, but with a .js extension,\n   in the src file's directory.\n\n   With dest argument, write file to provided location. If the dest\n   argument is a file outside the source tree, missing parent\n   directories will be created. The src file will only be compiled if\n   the dest file has an older modification time.\n\n   Both src and dest may be either a String or a File.\n\n   Returns a map containing {:ns .. :provides .. :requires .. :file ..}.\n   If the file was not compiled returns only {:file ...}"}