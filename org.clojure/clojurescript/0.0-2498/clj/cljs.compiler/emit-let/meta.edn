{:ns "cljs.compiler", :name "emit-let", :file "cljs/compiler.clj", :type :fn, :src "(defn emit-let\n  [{:keys [bindings expr env]} is-loop]\n  (let [context (:context env)]\n    (when (= :expr context) (emits \"(function (){\"))\n    (binding [*lexical-renames* (into *lexical-renames*\n                                      (when (= :statement context)\n                                        (map #(vector (System/identityHashCode %)\n                                                      (gensym (str (:name %) \"-\")))\n                                             bindings)))]\n      (doseq [{:keys [init] :as binding} bindings]\n        (emits \"var \")\n        (emit binding) ; Binding will be treated as a var\n        (emitln \" = \" init \";\"))\n      (when is-loop (emitln \"while(true){\"))\n      (emits expr)\n      (when is-loop\n        (emitln \"break;\")\n        (emitln \"}\")))\n    (when (= :expr context) (emits \"})()\"))))", :column 1, :line 648, :arglists ([{:keys [bindings expr env]} is-loop])}