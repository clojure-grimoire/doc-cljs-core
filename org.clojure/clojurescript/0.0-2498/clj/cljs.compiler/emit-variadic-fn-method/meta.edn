{:ns "cljs.compiler", :name "emit-variadic-fn-method", :file "cljs/compiler.clj", :type :fn, :src "(defn emit-variadic-fn-method\n  [{:keys [type name variadic params expr env recurs max-fixed-arity] :as f}]\n  (emit-wrap env\n             (let [name (or name (gensym))\n                   mname (munge name)\n                   delegate-name (str mname \"__delegate\")]\n               (emitln \"(function() { \")\n               (emits \"var \" delegate-name \" = function (\")\n               (doseq [param params]\n                 (emit param)\n                 (when-not (= param (last params)) (emits \",\")))\n               (emitln \"){\")\n               (when recurs (emitln \"while(true){\"))\n               (emits expr)\n               (when recurs\n                 (emitln \"break;\")\n                 (emitln \"}\"))\n               (emitln \"};\")\n\n               (emitln \"var \" mname \" = function (\" (comma-sep\n                                                      (if variadic\n                                                        (concat (butlast params) ['var_args])\n                                                        params)) \"){\")\n               (when type\n                 (emitln \"var self__ = this;\"))\n               (when variadic\n                 (emits \"var \")\n                 (emit (last params))\n                 (emitln \" = null;\")\n                 (emitln \"if (arguments.length > \" (dec (count params)) \") {\")\n                 (emits \"  \")\n                 (emit (last params))\n                 (emitln \" = cljs.core.array_seq(Array.prototype.slice.call(arguments, \" (dec (count params)) \"),0);\")\n                 (emitln \"} \"))\n               (emits \"return \" delegate-name \".call(this,\")\n               (doseq [param params]\n                 (emit param)\n                 (when-not (= param (last params)) (emits \",\")))\n               (emits \");\")\n               (emitln \"};\")\n\n               (emitln mname \".cljs$lang$maxFixedArity = \" max-fixed-arity \";\")\n               (emits mname \".cljs$lang$applyTo = \")\n               (emit-apply-to (assoc f :name name))\n               (emitln \";\")\n               (emitln mname \".cljs$core$IFn$_invoke$arity$variadic = \" delegate-name \";\")\n               (emitln \"return \" mname \";\")\n               (emitln \"})()\"))))", :column 1, :line 502, :arglists ([{:keys [type name variadic params expr env recurs max-fixed-arity], :as f}])}