{:ns "cljs.compiler", :name "compile-file*", :file "cljs/compiler.clj", :type :fn, :src "(defn compile-file*\n  ([src dest] (compile-file* src dest nil))\n  ([src dest opts]\n    (env/ensure\n      (with-core-cljs opts\n        (fn []\n          (with-open [out ^java.io.Writer (io/make-writer dest {})]\n            (binding [*out* out\n                      ana/*cljs-ns* 'cljs.user\n                      ana/*cljs-file* (.getPath ^File src)\n                      reader/*alias-map* (or reader/*alias-map* {})\n                      *source-map-data* (when (:source-map opts)\n                                          (atom\n                                            {:source-map (sorted-map)\n                                             :gen-col 0\n                                             :gen-line 0}))]\n              (emitln \"// Compiled by ClojureScript \" (util/clojurescript-version))\n              (loop [forms (ana/forms-seq src)\n                     ns-name nil\n                     deps nil]\n                (if (seq forms)\n                  (let [env (ana/empty-env)\n                        ast (ana/analyze env (first forms) nil opts)]\n                    (do (emit ast)\n                        (if (= (:op ast) :ns)\n                          (recur (rest forms) (:name ast) (merge (:uses ast) (:requires ast)))\n                          (recur (rest forms) ns-name deps))))\n                  (let [sm-data (when *source-map-data* @*source-map-data*)\n                        ret (merge\n                              {:ns (or ns-name 'cljs.user)\n                               :provides [ns-name]\n                               :requires (if (= ns-name 'cljs.core)\n                                           (set (vals deps))\n                                           (cond-> (conj (set (vals deps)) 'cljs.core)\n                                             (get-in @env/*compiler* [:opts :emit-constants])\n                                             (conj 'constants-table)))\n                               :file dest\n                               :source-file src}\n                              (when sm-data\n                                {:source-map (:source-map sm-data)}))]\n                    (when (and sm-data (= (:optimizations opts) :none))\n                      (let [sm-file (io/file (str (.getPath ^File dest) \".map\"))]\n                        (emits \"\\n//# sourceMappingURL=\" (.getName sm-file) \"?rel=\" (System/currentTimeMillis))\n                        (spit sm-file\n                          (sm/encode {(url-path src) (:source-map sm-data)}\n                            {:lines (+ (:gen-line sm-data) 2)\n                             :file (url-path dest)}))))\n                    (let [path (.getPath (.toURL ^File dest))]\n                      (swap! env/*compiler* assoc-in [::compiled-cljs path] ret)\n                      (swap! env/*compiler* assoc-in [::ana/analyzed-cljs path] true))\n                    ret))))))))))", :column 1, :line 874, :arglists ([src dest] [src dest opts])}