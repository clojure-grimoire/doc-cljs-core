{:ns "cljs.env", :name "with-compiler-env", :file "cljs/env.clj", :type :macro, :src "(defmacro with-compiler-env\n  \"Evaluates [body] with [env] bound as the value of the `*compiler*` var in\nthis namespace.\"\n  [env & body]\n  `(let [env# ~env\n         env# (cond\n               (map? env#) (atom env#)\n               (and (instance? clojure.lang.Atom env#)\n                    (map? @env#)) env#\n               :default (throw (IllegalArgumentException.\n                                (str \"Compiler environment must be a map or atom containing a map, not \"\n                                     (class env#)))))]\n     (binding [*compiler* env#] ~@body)))", :column 1, :line 47, :macro true, :arglists ([env & body]), :doc "Evaluates [body] with [env] bound as the value of the `*compiler*` var in\nthis namespace."}