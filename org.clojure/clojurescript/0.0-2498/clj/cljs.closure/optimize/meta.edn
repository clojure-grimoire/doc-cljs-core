{:ns "cljs.closure", :name "optimize", :file "cljs/closure.clj", :type :fn, :src "(defn optimize\n  \"Use the Closure Compiler to optimize one or more JavaScript files.\"\n  [opts & sources]\n  (let [closure-compiler (make-closure-compiler)\n        ^List externs (load-externs opts)\n        compiler-options (make-options opts)\n        sources (if (= :whitespace (:optimizations opts))\n                  (cons \"var CLOSURE_NO_DEPS = true;\" sources)\n                  sources)\n        ^List inputs (map #(js-source-file (javascript-name %) %) sources)\n        result ^Result (.compile closure-compiler externs inputs compiler-options)\n        preamble (make-preamble opts)\n        preamble-line-count (- (count (.split #\"\\r?\\n\" preamble -1)) 1)]\n    (if (.success result)\n      ;; compiler.getSourceMap().reset()\n      (let [source (.toSource closure-compiler)]\n        (when-let [name (:source-map opts)]\n          (with-open [out (io/writer name)]\n            (.appendTo (.getSourceMap closure-compiler) out name))\n          (let [sm-json (-> (io/file name) slurp\n                            (json/read-str :key-fn keyword))\n                closure-source-map (sm/decode sm-json)]\n            (loop [sources  (seq sources)\n                   relpaths {}\n                   merged   (sorted-map-by\n                              (sm/source-compare\n                                (remove nil?\n                                  (map (fn [source]\n                                         (if-let [^URL source-url (:source-url source)]\n                                           (.getPath source-url)\n                                           (if-let [^URL url (:url source)]\n                                             (.getPath url))))\n                                    sources))))]\n              (if sources\n                (let [source (first sources)]\n                  (recur\n                    (next sources)\n                    (let [{:keys [provides source-url]} source]\n                      (if (and provides source-url)\n                        (assoc relpaths (.getPath ^URL source-url)\n                          (util/ns->relpath (first provides)))\n                        relpaths))\n                    (if-let [url (:url source)]\n                      (let [path (.getPath ^URL url)]\n                        (if-let [compiled (get-in @env/*compiler* [::comp/compiled-cljs path])]\n                          (if-let [source-url (:source-url source)]\n                            (assoc merged (.getPath ^URL source-url)\n                              (sm/merge-source-maps\n                                (:source-map compiled)\n                                (get closure-source-map path)))\n                            merged)\n                          (assoc merged path (get closure-source-map path))))\n                      merged)))\n                (spit (io/file name)\n                      (sm/encode merged\n                                 {:preamble-line-count preamble-line-count\n                                  :lines (+ (:lineCount sm-json) preamble-line-count 2)\n                                  :file (:file sm-json)\n                                  :output-dir (output-directory opts)\n                                  :source-map-path (:source-map-path opts)\n                                  :source-map (:source-map opts)\n                                  :relpaths relpaths}))))))\n        source)\n      (report-failure result))))", :column 1, :line 596, :arglists ([opts & sources]), :doc "Use the Closure Compiler to optimize one or more JavaScript files."}