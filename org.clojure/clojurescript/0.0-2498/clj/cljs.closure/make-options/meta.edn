{:ns "cljs.closure", :name "make-options", :file "cljs/closure.clj", :type :fn, :src "(defn ^CompilerOptions make-options\n  \"Create a CompilerOptions object and set options from opts map.\"\n  [opts]\n  (let [level (case (:optimizations opts)\n                :advanced CompilationLevel/ADVANCED_OPTIMIZATIONS\n                :whitespace CompilationLevel/WHITESPACE_ONLY\n                :simple CompilationLevel/SIMPLE_OPTIMIZATIONS)\n        compiler-options (doto (CompilerOptions.)\n                           (.setCodingConvention (ClosureCodingConvention.)))]\n    (doseq [[key val] (:closure-defines opts)]\n      (let [key (name key)]\n        (cond\n          (string? val) (.setDefineToStringLiteral compiler-options key val)\n          (integer? val) (.setDefineToIntegerLiteral compiler-options key val)\n          (float? val) (.setDefineToDoubleLiteral compiler-options key val)\n          (or (true? val)\n              (false? val)) (.setDefineToBooleanLiteral compiler-options key val)\n          :else (println \"value for\" key \"must be string, int, float, or bool\"))))\n    (doseq [[type level] (:closure-warnings opts)]\n      (. compiler-options\n        (setWarningLevel (type warning-types) (level check-level))))\n    (when (contains? opts :source-map)\n      (set! (.sourceMapOutputPath compiler-options)\n            (:source-map opts))\n      (set! (.sourceMapDetailLevel compiler-options)\n            SourceMap$DetailLevel/ALL)\n      (set! (.sourceMapFormat compiler-options)\n            SourceMap$Format/V3))\n    (do (.setOptionsForCompilationLevel level compiler-options)\n        (set-options opts compiler-options)\n        compiler-options)))", :column 1, :line 158, :tag com.google.javascript.jscomp.CompilerOptions, :arglists ([opts]), :doc "Create a CompilerOptions object and set options from opts map."}