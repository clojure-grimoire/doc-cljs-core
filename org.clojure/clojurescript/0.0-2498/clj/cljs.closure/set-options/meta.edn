{:ns "cljs.closure", :name "set-options", :file "cljs/closure.clj", :type :fn, :src "(defn set-options\n  \"TODO: Add any other options that we would like to support.\"\n  [opts ^CompilerOptions compiler-options]\n  (when (contains? opts :pretty-print)\n    (set! (.prettyPrint compiler-options) (:pretty-print opts)))\n\n  (when (contains? opts :pseudo-names)\n    (set! (.generatePseudoNames compiler-options) (:pseudo-names opts)))\n\n  (when (contains? opts :anon-fn-naming-policy)\n    (let [policy (:anon-fn-naming-policy opts)]\n      (set! (.anonymousFunctionNaming compiler-options)\n        (case policy\n          :off AnonymousFunctionNamingPolicy/OFF\n          :unmapped AnonymousFunctionNamingPolicy/UNMAPPED\n          :mapped AnonymousFunctionNamingPolicy/MAPPED\n          (throw (IllegalArgumentException. (str \"Invalid :anon-fn-naming-policy value \" policy \" - only :off, :unmapped, :mapped permitted\")))))))\n\n  (when (contains? opts :language-in)\n    (case (:language-in opts)\n      :ecmascript5        (.setLanguageIn compiler-options CompilerOptions$LanguageMode/ECMASCRIPT5)\n      :ecmascript5-strict (.setLanguageIn compiler-options CompilerOptions$LanguageMode/ECMASCRIPT5_STRICT)\n      :ecmascript3        (.setLanguageIn compiler-options CompilerOptions$LanguageMode/ECMASCRIPT3)))\n\n  (when (contains? opts :language-out)\n    (case (:language-out opts)\n      :ecmascript5        (.setLanguageOut compiler-options CompilerOptions$LanguageMode/ECMASCRIPT5)\n      :ecmascript5-strict (.setLanguageOut compiler-options CompilerOptions$LanguageMode/ECMASCRIPT5_STRICT)\n      :ecmascript3        (.setLanguageOut compiler-options CompilerOptions$LanguageMode/ECMASCRIPT3)))\n\n  (when (contains? opts :print-input-delimiter)\n    (set! (.printInputDelimiter compiler-options)\n      (:print-input-delimiter opts))))", :column 1, :line 92, :arglists ([opts compiler-options]), :doc "TODO: Add any other options that we would like to support."}