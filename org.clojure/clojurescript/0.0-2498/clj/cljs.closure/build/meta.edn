{:ns "cljs.closure", :name "build", :file "cljs/closure.clj", :type :fn, :src "(defn build\n  \"Given a source which can be compiled, produce runnable JavaScript.\"\n  ([source opts]\n    (build source opts\n      (if-not (nil? env/*compiler*)\n        env/*compiler*\n        (env/default-compiler-env opts))))\n  ([source opts compiler-env]\n     (env/with-compiler-env compiler-env\n       (let [ups-deps (get-upstream-deps)\n             all-opts (-> opts\n                        (assoc\n                          :ups-libs (:libs ups-deps)\n                          :ups-foreign-libs (:foreign-libs ups-deps)\n                          :ups-externs (:externs ups-deps))\n                        (update-in [:preamble] #(into (or % []) [\"cljs/imul.js\"])))\n             emit-constants (or (and (= (:optimizations opts) :advanced)\n                                     (not (false? (:optimize-constants opts))))\n                                (:optimize-constants opts))]\n         (check-output-to opts)\n         (check-output-dir opts)\n         (check-source-map opts)\n         (check-source-map-path opts)\n         (check-output-wrapper opts)\n         (swap! compiler-env #(-> %\n                                  (assoc-in [:opts :emit-constants] emit-constants)\n                                  (assoc :target (:target opts))\n                                  (assoc :js-dependency-index (deps/js-dependency-index all-opts))))\n         (binding [ana/*cljs-static-fns*\n                   (or (and (= (:optimizations opts) :advanced)\n                            (not (false? (:static-fns opts))))\n                       (:static-fns opts)\n                       ana/*cljs-static-fns*)\n                   *assert* (not= (:elide-asserts opts) true)\n                   ana/*load-tests* (not= (:load-tests opts) false)\n                   ana/*cljs-warnings*\n                   (let [warnings (opts :warnings true)]\n                     (merge\n                       ana/*cljs-warnings*\n                       (if (or (true? warnings)\n                               (false? warnings))\n                         (zipmap\n                           [:unprovided :undeclared-var\n                            :undeclared-ns :undeclared-ns-form]\n                           (repeat warnings))\n                         warnings)))]\n           (let [compiled (-compile source all-opts)\n\n                 ; the constants_table.js file is not used directly here, is picked up by\n                 ; add-dependencies below\n                 _ (when emit-constants\n                     (comp/emit-constants-table-to-file (::ana/constant-table @env/*compiler*)\n                                                        (str (output-directory all-opts) \"/constants_table.js\")))\n                 js-sources (concat\n                             (apply add-dependencies all-opts\n                                    (concat (if (coll? compiled) compiled [compiled])\n                                            (when (= :nodejs (:target all-opts))\n                                              [(-compile (io/resource \"cljs/nodejs.cljs\") all-opts)])))\n                             (when (= :nodejs (:target all-opts))\n                               [(-compile (io/resource \"cljs/nodejscli.cljs\") all-opts)]))\n                 optim (:optimizations all-opts)\n                 ret (if (and optim (not= optim :none))\n                       (do\n                         (when-let [fname (:source-map all-opts)]\n                           (assert (string? fname)\n                             (str \":source-map must name a file when using :whitespace, \"\n                               \":simple, or :advanced optimizations\"))\n                           (doall (map #(source-on-disk all-opts %) js-sources)))\n                         (->> js-sources\n                           (apply optimize all-opts)\n                           (add-wrapper all-opts)\n                           (add-source-map-link all-opts)\n                           (add-header all-opts)\n                           (output-one-file all-opts)))\n                       (apply output-unoptimized all-opts js-sources))]\n             ;; emit Node.js bootstrap script for :none & :whitespace optimizations\n             (when (and (= (:target opts) :nodejs)\n                        (#{:none :whitespace} (:optimizations opts)))\n               (let [outfile (io/file (io/file (output-directory opts)) \"goog/bootstrap/nodejs.js\")]\n                 (comp/mkdirs outfile)\n                 (spit outfile (slurp (io/resource \"cljs/bootstrap_node.js\")))))\n             ret))))))", :column 1, :line 936, :arglists ([source opts] [source opts compiler-env]), :doc "Given a source which can be compiled, produce runnable JavaScript."}