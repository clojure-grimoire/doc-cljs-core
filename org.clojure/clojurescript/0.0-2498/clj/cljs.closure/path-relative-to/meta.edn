{:ns "cljs.closure", :name "path-relative-to", :file "cljs/closure.clj", :type :fn, :src "(defn path-relative-to\n  \"Generate a string which is the path to input relative to base.\"\n  [^File base input]\n  (let [base-path (util/path-seq (.getCanonicalPath base))\n        input-path (util/path-seq (.getCanonicalPath (io/file ^URL (deps/-url input))))\n        count-base (count base-path)\n        common (count (take-while true? (map #(= %1 %2) base-path input-path)))\n        prefix (repeat (- count-base common 1) \"..\")]\n    (if (= count-base common)\n      (last input-path) ;; same file\n      (util/to-path (concat prefix (drop common input-path)) \"/\"))))", :column 1, :line 710, :arglists ([base input]), :doc "Generate a string which is the path to input relative to base."}