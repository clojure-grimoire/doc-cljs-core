{:ns "cljs.closure", :name "check-source-map", :file "cljs/closure.clj", :type :fn, :src "(defn check-source-map [{:keys [output-to source-map output-dir] :as opts}]\n  \"When :source-map is specified in opts, \"\n  (when (and (contains? opts :source-map)\n             (not (= (:optimizations opts) :none)))\n    (assert (and (contains? opts :output-to)\n                 (contains? opts :output-dir))\n      \":source-map cannot be specied without also specifying :output-to and :output-dir if optimization setting applied\")\n    (assert (string? source-map)\n      (format \":source-map %s must specify a file in the same directory as :output-to %s if optimization setting applied\"\n        (pr-str source-map)\n        (pr-str output-to)))\n    (assert (in-same-dir? source-map output-to)\n      (format \":source-map %s must specify a file in the same directory as :output-to %s if optimization setting applied\"\n        (pr-str source-map)\n        (pr-str output-to)))\n    (assert (same-or-subdirectory-of? (absolute-parent output-to) output-dir)\n      (format \":output-dir %s must specify a directory in :output-to's parent %s if optimization setting applied\"\n        (pr-str output-dir)\n        (pr-str (absolute-parent output-to)))))\n  true)", :column 1, :line 900, :arglists ([{:keys [output-to source-map output-dir], :as opts}])}