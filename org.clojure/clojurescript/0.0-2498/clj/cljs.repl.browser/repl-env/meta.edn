{:ns "cljs.repl.browser", :name "repl-env", :file "cljs/repl/browser.clj", :type :fn, :src "(defn repl-env\n  \"Create a browser-connected REPL environment.\n\n  Options:\n\n  port:           The port on which the REPL server will run. Defaults to 9000.\n  working-dir:    The directory where the compiled REPL client JavaScript will\n                  be stored. Defaults to \\\".repl\\\" with a ClojureScript version\n                  suffix, eg. \\\".repl-0.0-2138\\\".\n  serve-static:   Should the REPL server attempt to serve static content?\n                  Defaults to true.\n  static-dir:     List of directories to search for static content. Defaults to\n                  [\\\".\\\" \\\"out/\\\"].\n  preloaded-libs: List of namespaces that should not be sent from the REPL server\n                  to the browser. This may be required if the browser is already\n                  loading code and reloading it would cause a problem.\n  optimizations:  The level of optimization to use when compiling the client\n                  end of the REPL. Defaults to :simple.\n  src:            The source directory containing user-defined cljs files. Used to\n                  support reflection. Defaults to \\\"src/\\\".\n  \"\n  [& {:as opts}]\n  (let [compiler-env (cljs.env/default-compiler-env opts)\n        opts (merge (BrowserEnv.)\n                    {:port          9000\n                     :optimizations :simple\n                     :working-dir   (->> [\".repl\" (util/clojurescript-version)] (remove empty?) (string/join \"-\"))\n                     :serve-static  true\n                     :static-dir    [\".\" \"out/\"]\n                     :preloaded-libs   []\n                     :src           \"src/\"\n                     :cljs.env/compiler compiler-env\n                     :source-map    true}\n                    opts)]\n    (cljs.env/with-compiler-env compiler-env\n      (reset! preloaded-libs (set (concat (always-preload) (map str (:preloaded-libs opts)))))\n        (reset! loaded-libs @preloaded-libs)\n        (swap! browser-state\n               (fn [old] (assoc old :client-js\n                               (future (create-client-js-file\n                                        opts\n                                        (io/file (:working-dir opts) \"client.js\"))))))\n        opts)))", :column 1, :line 226, :arglists ([& {:as opts}]), :doc "Create a browser-connected REPL environment.\n\n  Options:\n\n  port:           The port on which the REPL server will run. Defaults to 9000.\n  working-dir:    The directory where the compiled REPL client JavaScript will\n                  be stored. Defaults to \".repl\" with a ClojureScript version\n                  suffix, eg. \".repl-0.0-2138\".\n  serve-static:   Should the REPL server attempt to serve static content?\n                  Defaults to true.\n  static-dir:     List of directories to search for static content. Defaults to\n                  [\".\" \"out/\"].\n  preloaded-libs: List of namespaces that should not be sent from the REPL server\n                  to the browser. This may be required if the browser is already\n                  loading code and reloading it would cause a problem.\n  optimizations:  The level of optimization to use when compiling the client\n                  end of the REPL. Defaults to :simple.\n  src:            The source directory containing user-defined cljs files. Used to\n                  support reflection. Defaults to \"src/\".\n  "}