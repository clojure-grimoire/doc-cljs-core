{:ns "cljs.core", :name "fast-path-protocols", :file "cljs/core.clj", :type :var, :src "(def fast-path-protocols\n  \"protocol fqn -> [partition number, bit]\"\n  (zipmap (map #(symbol \"cljs.core\" (core/str %))\n               '[IFn ICounted IEmptyableCollection ICollection IIndexed ASeq ISeq INext\n                 ILookup IAssociative IMap IMapEntry ISet IStack IVector IDeref\n                 IDerefWithTimeout IMeta IWithMeta IReduce IKVReduce IEquiv IHash\n                 ISeqable ISequential IList IRecord IReversible ISorted IPrintWithWriter IWriter\n                 IPrintWithWriter IPending IWatchable IEditableCollection ITransientCollection\n                 ITransientAssociative ITransientMap ITransientVector ITransientSet\n                 IMultiFn IChunkedSeq IChunkedNext IComparable INamed ICloneable IAtom\n                 IReset ISwap])\n          (iterate (fn [[p b]]\n                     (if (core/== 2147483648 b)\n                       [(core/inc p) 1]\n                       [p (core/bit-shift-left b 1)]))\n                   [0 1])))", :column 1, :line 182, :doc "protocol fqn -> [partition number, bit]"}