{:ns "cljs.core", :name "validate-impl-sigs", :file "cljs/core.clj", :type :fn, :src "(defn validate-impl-sigs [env p method]\n  (when-not (= p 'Object)\n    (let [var (ana/resolve-var (dissoc env :locals) p)\n          minfo (-> var :protocol-info :methods)\n          [fname sigs] (if (core/vector? (second method))\n                         [(first method) [(second method)]]\n                         [(first method) (map first (rest method))])\n          decmeths (core/get minfo fname ::not-found)]\n      (when (= decmeths ::not-found)\n        (ana/warning :protocol-invalid-method env {:protocol p :fname fname :no-such-method true}))\n      (loop [sigs sigs seen #{}]\n        (when (seq sigs)\n          (let [sig (first sigs)\n                c   (count sig)]\n            (when (contains? seen c)\n              (ana/warning :protocol-duped-method env {:protocol p :fname fname}))\n            (when (core/and (not= decmeths ::not-found) (not (some #{c} (map count decmeths))))\n              (ana/warning :protocol-invalid-method env {:protocol p :fname fname :invalid-arity c}))\n            (recur (next sigs) (conj seen c))))))))", :column 1, :line 783, :arglists ([env p method])}