{:ns "cljs.core", :name "gen-apply-to-helper", :file "cljs/core.clj", :type :fn, :src "(defn gen-apply-to-helper\n  ([] (gen-apply-to-helper 1))\n  ([n]\n     (let [prop (symbol (core/str \"-cljs$core$IFn$_invoke$arity$\" n))\n           f (symbol (core/str \"cljs$core$IFn$_invoke$arity$\" n))]\n       (if (core/<= n 20)\n         `(let [~(cs (core/dec n)) (-first ~'args)\n                ~'args (-rest ~'args)]\n            (if (core/== ~'argc ~n)\n              (if (. ~'f ~prop)\n                (. ~'f (~f ~@(take n cs)))\n                (~'f ~@(take n cs)))\n              ~(gen-apply-to-helper (core/inc n))))\n         `(throw (js/Error. \"Only up to 20 arguments supported on functions\"))))))", :column 1, :line 1622, :arglists ([] [n])}