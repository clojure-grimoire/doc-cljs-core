{:ns "cljs.core", :name "dt->et", :file "cljs/core.clj", :type :fn, :src "(defn dt->et\n  ([type specs fields]\n    (dt->et type specs fields false))\n  ([type specs fields inline]\n    (let [annots {:cljs.analyzer/type type\n                  :cljs.analyzer/protocol-impl true\n                  :cljs.analyzer/protocol-inline inline}]\n      (loop [ret [] specs specs]\n        (if (seq specs)\n          (let [p     (first specs)\n                ret   (-> (conj ret p)\n                        (into (reduce (partial annotate-specs annots) []\n                                (group-by first (take-while seq? (next specs))))))\n                specs (drop-while seq? (next specs))]\n            (recur ret specs))\n          ret)))))", :column 1, :line 856, :arglists ([type specs fields] [type specs fields inline])}