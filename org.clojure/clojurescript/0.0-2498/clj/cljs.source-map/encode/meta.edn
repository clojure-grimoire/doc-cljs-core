{:ns "cljs.source-map", :name "encode", :file "cljs/source_map.clj", :type :fn, :src "(defn encode\n  \"Take an internal source map representation represented as nested\n   sorted maps of file, line, column and return a source map v3 JSON\n   string.\"\n  [m opts]\n  (let [lines (atom [[]])\n        names->idx (atom {})\n        name-idx (atom 0)\n        preamble-lines (take (or (:preamble-line-count opts) 0) (repeat []))\n        info->segv\n        (fn [info source-idx line col]\n          (let [segv [(:gcol info) source-idx line col]]\n            (if-let [name (:name info)]\n              (let [idx (if-let [idx (get @names->idx name)]\n                          idx\n                          (let [cidx @name-idx]\n                            (swap! names->idx assoc name cidx)\n                            (swap! name-idx inc)\n                            cidx))]\n                (conj segv idx))\n              segv)))\n        encode-cols\n        (fn [infos source-idx line col]\n          (doseq [info infos]\n            (let [segv (info->segv info source-idx line col)\n                  gline (:gline info)\n                  lc (count @lines)]\n              (if (> gline (dec lc))\n                (swap! lines\n                  (fn [lines]\n                    (conj (into lines (repeat (dec (- gline (dec lc))) [])) [segv])))\n                (swap! lines\n                  (fn [lines]\n                    (update-in lines [gline] conj segv)))))))]\n    (doseq [[source-idx [_ lines]] (map-indexed (fn [i v] [i v]) m)]\n      (doseq [[line cols] lines]\n        (doseq [[col infos] cols]\n          (encode-cols infos source-idx line col))))\n    (let [source-map-file-contents\n          (cond-> {\"version\" 3\n                   \"file\" (:file opts)\n                   \"sources\" (into []\n                                   (let [paths (keys m)\n                                         f (comp\n                                            #(str % \"?rel=\" (System/currentTimeMillis))\n                                            (if (or (:output-dir opts)\n                                                   (:source-map-path opts))\n                                             #(relativize-path % opts)\n                                             #(last (string/split % #\"/\"))))]\n                                     (map f paths)))\n                   \"lineCount\" (:lines opts)\n                   \"mappings\" (->> (lines->segs (concat preamble-lines @lines))\n                                   (map #(string/join \",\" %))\n                                   (string/join \";\"))\n                   \"names\" (into []\n                                 (map (set/map-invert @names->idx)\n                                      (range (count @names->idx))))}\n                  (:sources-content opts)\n                  (assoc \"sourcesContent\" (:sources-content opts)))]\n      (with-out-str\n        (json/pprint\n         source-map-file-contents\n         :escape-slash false)))))", :column 1, :line 176, :arglists ([m opts]), :doc "Take an internal source map representation represented as nested\n   sorted maps of file, line, column and return a source map v3 JSON\n   string."}