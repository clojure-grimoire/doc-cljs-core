{:ns "cljs.analyzer", :name "get-expander", :file "cljs/analyzer.clj", :type :fn, :src "(defn get-expander [sym env]\n  (let [mvar\n        (when-not (or (-> env :locals sym)        ;locals hide macros\n                      (and (or (-> env :ns :excludes sym)\n                               (get-in @env/*compiler* [::namespaces (-> env :ns :name) :excludes sym]))\n                           (not (or (-> env :ns :use-macros sym)\n                                    (get-in @env/*compiler* [::namespaces (-> env :ns :name) :use-macros sym])))))\n          (if-let [nstr (namespace sym)]\n            (when-let [ns (cond\n                           (= \"clojure.core\" nstr) (find-ns 'cljs.core)\n                           (.contains nstr \".\") (find-ns (symbol nstr))\n                           :else\n                           (some-> env :ns :require-macros (get (symbol nstr)) find-ns))]\n              (.findInternedVar ^clojure.lang.Namespace ns (symbol (name sym))))\n            (if-let [nsym (-> env :ns :use-macros sym)]\n              (.findInternedVar ^clojure.lang.Namespace (find-ns nsym) sym)\n              (.findInternedVar ^clojure.lang.Namespace (find-ns 'cljs.core) sym))))]\n    (when (and mvar (.isMacro ^clojure.lang.Var mvar))\n      (with-meta @mvar (meta mvar)))))", :column 1, :line 1449, :arglists ([sym env])}