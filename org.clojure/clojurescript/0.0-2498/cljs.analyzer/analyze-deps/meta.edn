{:ns "cljs.analyzer", :name "analyze-deps", :file "cljs/analyzer.clj", :type :fn, :src "(defn analyze-deps\n  ([lib deps env] (analyze-deps lib deps nil))\n  ([lib deps env opts]\n     (binding [*cljs-dep-set* (vary-meta (conj *cljs-dep-set* lib) update-in [:dep-path] conj lib)]\n       (assert (every? #(not (contains? *cljs-dep-set* %)) deps)\n         (str \"Circular dependency detected \" (-> *cljs-dep-set* meta :dep-path)))\n       (doseq [dep deps]\n         (when-not (or (contains? (::namespaces @env/*compiler*) dep)\n                     (contains? (:js-dependency-index @env/*compiler*) (name dep))\n                     (deps/find-classpath-lib dep))\n           (let [relpath (util/ns->relpath dep)\n                 src (locate-src relpath)]\n             (if src\n               (analyze-file src opts)\n               (warning :undeclared-ns env {:ns-sym dep}))))))))", :column 1, :line 1024, :arglists ([lib deps env] [lib deps env opts])}